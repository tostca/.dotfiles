-- local util = require("lspconfig.util")
-- local tailwind_filetypes = {
--   "html",
--   "typescriptreact",
--   "javascriptreact",
--   "css",
--   "sass",
--   "scss",
--   "less",
--   "javascript",
--   "typescript",
--   "heex",
--   "elixir",
--   "erb",
-- }

return {
  -- -- add tailwind to mason
  -- {
  --   "williamboman/mason.nvim",
  --   opts = function(_, opts)
  --     vim.list_extend(opts.ensure_installed, { "tailwindcss-language-server" })
  --   end,
  -- },
  -- -- {
  -- --   "jose-elias-alvarez/null-ls.nvim",
  -- --   opts = function(_, opts)
  -- --     local null_ls = require("null-ls")
  -- --     local formatting = null_ls.builtins.formatting
  -- --     opts.sources = vim.list_extend(opts.sources, {
  -- --       formatting.rustywind.with({
  -- --         filetypes = tailwind_filetypes,
  -- --       }),
  -- --     })
  -- --   end,
  -- -- },
  -- -- add tailwind
  -- {
  --   "neovim/nvim-lspconfig",
  --   opts = {
  --     servers = {
  --       tailwindcss = {
  --         filetypes = tailwind_filetypes,
  --         init_options = {
  --           userLanguages = {
  --             elixir = "phoenix-heex",
  --             eruby = "erb",
  --             heex = "phoenix-heex",
  --             svelte = "html",
  --             -- heex = "html-eex",
  --             -- elixir = "html-eex",
  --             surface = "phoenix-heex",
  --           },
  --         },
  --         handlers = {
  --           ["tailwindcss/getConfiguration"] = function(_, _, params, _, bufnr, _)
  --             vim.lsp.buf_notify(bufnr, "tailwindcss/getConfigurationResponse", { _id = params._id })
  --           end,
  --         },
  --         settings = {
  --           includeLanguages = {
  --             typescript = "javascript",
  --             typescriptreact = "html",
  --             ["html-eex"] = "html",
  --             ["phoenix-heex"] = "html",
  --             heex = "html",
  --             eelixir = "html",
  --             elixir = "html",
  --             elm = "html",
  --             erb = "html",
  --             svelte = "html",
  --             surface = "html",
  --           },
  --           tailwindCSS = {
  --             lint = {
  --               cssConflict = "warning",
  --               invalidApply = "error",
  --               invalidConfigPath = "error",
  --               invalidScreen = "error",
  --               invalidTailwindDirective = "error",
  --               invalidVariant = "error",
  --               recommendedVariantOrder = "warning",
  --             },
  --             classAttributes = {
  --               "class",
  --               "className",
  --               "classList",
  --               "ngClass",
  --             },
  --             experimental = {
  --               classRegex = {
  --                 [[class= "([^"]*)]],
  --                 [[class: "([^"]*)]],
  --                 '~H""".*class="([^"]*)".*"""',
  --                 "\\bclass:\\s*'([^']*)'",
  --                 '\\bclass:\\s*"([^"]*)"',
  --               },
  --             },
  --             validate = true,
  --           },
  --         },
  --       },
  --     },
  --   },
  -- },
  -- {
  --   "hrsh7th/nvim-cmp",
  --   dependencies = {
  --     { "roobert/tailwindcss-colorizer-cmp.nvim", opts = {} },
  --   },
  --   opts = function(_, opts)
  --     -- original LazyVim kind icon formatter
  --     local format_kinds = opts.formatting.format
  --     opts.formatting.format = function(entry, item)
  --       format_kinds(entry, item) -- add icons
  --       return require("tailwindcss-colorizer-cmp").formatter(entry, item)
  --     end
  --   end,
  -- },
  -- { "roobert/tailwindcss-colorizer-cmp.nvim", opts = {} },
}

-- return {
--   {
--     "neovim/nvim-lspconfig",
--     opts = {
--       servers = {
--         tailwindcss = {
--           root_dir = function(fname)
--             return util.root_pattern(
--               "tailwind.config.js",
--               "tailwind.config.cjs",
--               "tailwind.config.mjs",
--               "tailwind.config.ts",
--               "postcss.config.js",
--               "postcss.config.cjs",
--               "postcss.config.mjs",
--               "postcss.config.ts"
--             )(fname) or util.find_package_json_ancestor(fname) or util.find_node_modules_ancestor(fname) or util.find_git_ancestor(
--               fname
--             )
--           end,
--           settings = {
--             experimental = {
--               classRegex = {
--                 [[class= "([^"]*)]],
--                 [[class: "([^"]*)]],
--                 '~H""".*class="([^"]*)".*"""',
--                 'class[:]\\s*"([^"]*)"',
--                 "\\bclass:\\s*'([^']*)'",
--                 '\\bclass:\\s*"([^"]*)"',
--               },
--               validate = true,
--               classAttributes = {
--                 "class",
--                 "className",
--                 "classList",
--                 "ngClass",
--               },
--             },
--           },
--           includeLanguages = {
--             typescript = "javascript",
--             typescriptreact = "html",
--             ["html-eex"] = "html",
--             ["phoenix-heex"] = "html",
--             heex = "html",
--             eelixir = "html",
--             elixir = "html",
--             elm = "html",
--             erb = "html",
--             svelte = "html",
--             surface = "html",
--           },
--           init_options = {
--             userLanguages = {
--               elixir = "phoenix-heex",
--               eruby = "erb",
--               heex = "phoenix-heex",
--               svelte = "html",
--               surface = "phoenix-heex",
--             },
--           },
--           filetypes_include = {
--             elixir = "phoenix-heex",
--             eruby = "erb",
--             heex = "phoenix-heex",
--             surface = "phoenix-heex",
--             ["html-eex"] = "html",
--             ["phoenix-heex"] = "html",
--           },
--         },
--       },
--     },
--     setup = {
--       tailwindcss = function(_, opts)
--         local tw = require("lspconfig.server_configurations.tailwindcss")
--         opts.filetypes = opts.filetypes or {}
--
--         -- Add default filetypes
--         vim.list_extend(opts.filetypes, tw.default_config.filetypes)
--
--         -- Add additional filetypes
--         vim.list_extend(opts.filetypes, opts.filetypes_include or {})
--       end,
--     },
--   },
-- }
